/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */

#include <iostream>
#include <fstream>


#include <bits/stdc++.h>

using namespace std;

const int maxN = 1e5 + 5;
long long dp[maxN];

class AFrog1 {
public:
    long long jump_count(int current_pos, int maximum_pos, const vector<int> &heights) {
        if (current_pos >= maximum_pos - 1)
            return 0LL;
        if (dp[current_pos] != -1)
            return dp[current_pos];
        return dp[current_pos] = min(abs(heights[current_pos + 1] - heights[current_pos]) +
                                     jump_count(current_pos + 1, maximum_pos, heights),
                                     abs(heights[current_pos + 2] - heights[current_pos]) +
                                     jump_count(current_pos + 2, maximum_pos, heights));
    }

    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> heights(n);
        for (int i = 0; i < n; ++i) {
            in >> heights[i];
        }
        memset(dp, -1, sizeof(dp));
        out << jump_count(0, n - 1, heights);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    AFrog1 solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
