/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */


#include <bits/stdc++.h>

using namespace std;

const int maxN = 1e5 + 1;
long long dp[maxN];

class AFrog1 {
public:
    long long jump_count(int current_pos, const vector<int> &heights) {
        long long cost = INT_MAX;
        //if frog reached at the bottom, so no more cost needed
        if (current_pos == 0)
            return 0LL;
        if (dp[current_pos] != -1)
            return dp[current_pos];
        //single step jump--cost
        cost = min(cost, abs(heights[current_pos] - heights[current_pos - 1]) + jump_count(current_pos - 1, heights));
        //double step jump cost -- but it is possible if frog is at the step > 1, because otherwise we will go array outofbound
        if (current_pos > 1)
            cost = min(cost,
                       abs(heights[current_pos - 2] - heights[current_pos]) + jump_count(current_pos - 2, heights));
        return dp[current_pos] = cost;
    }

    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;
        vector<int> heights(n);
        for (int i = 0; i < n; ++i) {
            in >> heights[i];
        }
        memset(dp, -1, sizeof(dp));
        out << jump_count(n - 1, heights);
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    AFrog1 solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
