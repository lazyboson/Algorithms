/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
//Problem - https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=400
#include <bits/stdc++.h>

using namespace std;
const int maxN = 26;

class GraphConnectivity {
public:
    void dfs(int v, array<int, maxN> &visited, map<int, vector<int>> &adj) {
        if (visited[v] != -1)
            return;
        visited[v] = true;
        for (auto const &u: adj[v]) {
            dfs(u, visited, adj);
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        int tc;
        in >> tc;
        string ss;
        getline(in, ss);
        getline(in, ss);
        for (int j = 1; j <= tc; ++j) {
            map<int, vector<int>> adj;
            array<int, maxN> visited;
            visited.fill(-1);
            char largestOne;
            while (true) {
                getline(in, ss);
                if (ss.empty())
                    break;
                if (ss.size() == 1) {
                    largestOne = ss[0];
                    continue;
                }
                adj[ss[0] - 'A'].push_back(ss[1] - 'A');
                adj[ss[1] - 'A'].push_back(ss[0] - 'A');
            }

            int numberOfConnectedComponent = 0;
            for (int i = 0; i <= largestOne - 'A'; ++i) {
                if (visited[i] == -1) {
                    numberOfConnectedComponent++;
                    dfs(i, visited, adj);
                }
            }
            if (j != 1) out << "\n";
            out << numberOfConnectedComponent << endl;
        }
    }
};

int main() {
    GraphConnectivity solver;
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
