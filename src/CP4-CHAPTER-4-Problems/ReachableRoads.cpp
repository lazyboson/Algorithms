/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
//Problem - https://open.kattis.com/problems/reachableroads

#include <bits/stdc++.h>

using namespace std;
const int maxN = 1001;

class ReachableRoads {
public:
    void dfs(int v, array<int, maxN> &visited, array<vector<int>, maxN> &adj) {
        if (visited[v] != -1)
            return;
        visited[v] = true;
        for (auto const &u: adj[v]) {
            dfs(u, visited, adj);
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        int tc;
        in >> tc;
        while (tc--) {
            array<int, maxN> visited;
            visited.fill(-1);
            array<vector<int>, maxN> adj;
            int cityCount;
            in >> cityCount;
            int src, dest, edges;
            in >> edges;
            for (int i = 0; i < edges; ++i) {
                in >> src >> dest;
                adj[src].push_back(dest);
                adj[dest].push_back(src);
            }
            int cc = 0;
            for (int i = 0; i < cityCount; ++i) {
                if (visited[i] == -1) {
                    cc++;
                    dfs(i, visited, adj);
                }
            }

            out << cc - 1 << "\n";
        }
    }
};

int main() {
    ReachableRoads solver;
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
