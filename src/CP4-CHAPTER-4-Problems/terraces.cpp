/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
//Problem - https://open.kattis.com/problems/terraces
#include <bits/stdc++.h>

using namespace std;
const int maxN = 501;
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

class Terraces {
public:
    int bfs(int x, int y, set<pair<int, int>> &visited, int rows, int cols, vector<vector<int>> &adj) {
        auto is_valid_coordinate = [&](int a, int b) {
            return (a >= 0 && a < rows && b >= 0 && b < cols);
        };
        int count = 0;
        bool ok = false;
        queue<pair<int, int>> q;
        q.push({x, y});
        visited.insert({x, y});
        while (!q.empty()) {
            auto curr = q.front();
            count++;
            q.pop();
            for (int i = 0; i < 4; ++i) {
                int ux = curr.first + dx[i];
                int uy = curr.second + dy[i];
                if (is_valid_coordinate(ux, uy)) {
                    if (visited.find({ux, uy}) == visited.end() && adj[ux][uy] == adj[curr.first][curr.second]) {
                        q.push({ux, uy});
                        visited.insert({ux, uy});
                    }
                    if (adj[ux][uy] < adj[curr.first][curr.second])
                        ok = true;
                }
            }
        }
        if (!ok)
            return count;
        return 0;
    }

    void solve(std::istream &in, std::ostream &out) {
        int cols, rows;
        in >> cols >> rows;
        vector<vector<int>> matrix(rows, vector<int>(cols));
        set<pair<int, int>> visited;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                int val;
                in >> val;
                matrix[i][j] = val;
            }
        }
        int ans = 0;
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (visited.find({i, j}) == visited.end())
                    ans += bfs(i, j, visited, rows, cols, matrix);
            }
        }
        out << ans << "\n";
    }
};

int main() {
    Terraces solver;
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
