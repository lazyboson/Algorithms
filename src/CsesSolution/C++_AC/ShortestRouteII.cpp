/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <queue>

typedef long long ll;
const ll MAXIMUM = 1e18;

class ShortestRoutesII {
public:
    void floyd_warshall(std::vector<std::vector<ll>> &adj, ll n) {
        for (int k = 1; k <= n; ++k) {
            for (int i = 1; i <= n; ++i) {
                for (int j = 1; j <= n; ++j) {
                    if (adj[i][k] < MAXIMUM && adj[k][j] < MAXIMUM) {
                        adj[i][j] = std::min(adj[i][j], adj[i][k] + adj[k][j]);
                    }
                }
            }
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        ll n, m, q;
        in >> n >> m >> q;
        //ll adj[n+1][n+1];
        std::vector<std::vector<ll>> adj(n + 1, std::vector<ll>(n + 1));
        //preprocessing the values
        for (ll i = 0; i < n + 1; ++i) {
            for (ll j = 0; j < n + 1; ++j) {
                if (i == j)
                    adj[i][j] = 0;
                else
                    adj[i][j] = MAXIMUM;
            }
        }
        //filling the graph
        for (int i = 0; i < m; ++i) {
            ll src, dest, w;
            in >> src >> dest >> w;
            if (adj[src][dest] != MAXIMUM) {
                if (adj[src][dest] < w) {
                    continue;
                }
            }
            adj[src][dest] = w;
            adj[dest][src] = w;
        }
        floyd_warshall(adj, n);
        while (q--) {
            std::vector<bool> visited(n + 1, false);
            std::vector<ll> distance(n + 1, MAXIMUM);
            ll src, dest;
            in >> src >> dest;
            if (adj[src][dest] == MAXIMUM)
                out << "-1" << "\n";
            else
                out << adj[src][dest] << "\n";
        }
    }
};

int main() {
    ShortestRoutesII solver;
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}