/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <algorithm>

typedef long long ll;

class RoadReparation {
public:

    struct edge {
        ll u, v, w;

        bool operator<(edge const &other) {
            return w < other.w;
        }
    };

    void make_set(ll v, std::vector<ll> &parent, std::vector<ll> &rank) {
        parent[v] = v;
        rank[v] = 0LL;
    }

    ll find_set(ll v, std::vector<ll> &parent, std::vector<ll> &rank) {
        if (v == parent[v])
            return v;
        return parent[v] = find_set(parent[v], parent, rank);
    }

    void union_set(ll a, ll b, std::vector<ll> &parent, std::vector<ll> &rank) {
        if (rank[a] < rank[b])
            parent[a] = b;
        else if (rank[b] > rank[a])
            parent[b] = a;
        else {
            parent[b] = a;
            rank[a]++;
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        ll n, m;
        ll cost = 0;
        in >> n >> m;
        std::vector<ll> parent(n + 1), rank(n + 1);
        std::vector<edge> edges;
        for (ll i = 0; i < m; ++i) {
            edge e;
            in >> e.u >> e.v >> e.w;
            edges.push_back(e);
        }

        for (int i = 1; i <= n; ++i) {
            make_set(i, parent, rank);
        }
        std::sort(edges.begin(), edges.end());
        for (auto e: edges) {
            ll x = find_set(e.u, parent, rank);
            ll y = find_set(e.v, parent, rank);
            if (x != y) {
                cost += e.w;
                union_set(x, y, parent, rank);
            }
        }
        ll p = find_set(1, parent, rank);
        for (ll d = 2; d <= n; d++) {
            if (find_set(d, parent, rank) != p) {
                out << "IMPOSSIBLE" << "\n";
                return;
            }
        }
        out << cost << "\n";

    }
};

int main() {
    RoadReparation solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}