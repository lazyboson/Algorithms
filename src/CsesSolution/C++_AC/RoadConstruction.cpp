/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>
#include <map>
#include <queue>

class RoadConstruction {
public:
    struct edge {
        int u;
        int v;
    };

    int find_set(int a, std::vector<int> &parent) {
        if (parent[a] == a)
            return a;
        return parent[a] = find_set(parent[a], parent);
    }

    void union_sets(int a, int b, std::vector<int> &parent, std::vector<int> &rank) {
        if (rank[a] < rank[b])
            parent[a] = b;
        else if (rank[a] > rank[b])
            parent[b] = a;
        else {
            parent[b] = a;
            rank[a]++;
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        std::vector<int> parent(n + 1);
        std::vector<int> rank(n + 1);
        std::vector<edge> edges;
        for (int i = 0; i < m; ++i) {
            int src, dest;
            in >> src >> dest;
            edge e;
            e.u = src, e.v = dest;
            edges.push_back(e);
        }

        for (int i = 0; i <= n; ++i) {
            parent[i] = i;
            rank[i] = 0;
        }

        for (auto e: edges) {
            std::map<int, int> ans;
            std::priority_queue<int> queue;
            int x = find_set(e.u, parent);
            int y = find_set(e.v, parent);
            if (x != y) {
                union_sets(x, y, parent, rank);
            }

            for (int i = 1; i <= n; i++) {
                int curr_p = find_set(i, parent);
                ans[curr_p]++;
                queue.push(ans[curr_p]);
            }

            out << ans.size() << " ";

            out << queue.top();
            out << "\n";
        }
    }
};

int main() {
    RoadConstruction solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}