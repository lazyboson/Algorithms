/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
#include <vector>
#include <queue>
 
const int maxN = 1e5 + 5;
std::vector<int> adj[maxN];
int color[maxN];
 
 
class BuildingTeams {
public:
    bool dfs(int i) {
        if (color[i] == -1)
            color[i] = 1;
        for (auto const &u: adj[i]) {
            if (color[u] == -1) {
                color[u] = 1 - color[i];
                if (!dfs(u))
                    return false;
            } else if (color[u] == color[i])
                return false;
        }
        return true;
    }
 
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        for (int i = 0, src, dest; i < m; i++) {
            in >> src >> dest, --src, --dest;
            adj[src].push_back(dest);
            adj[dest].push_back(src);
        }
        std::fill(color, color + n, -1);
        bool is_bipartite = true;
        for (int i = 0; i < n; ++i) {
            if (color[i] == -1) {
                if (!dfs(i))
                    is_bipartite = false;
            }
        }
 
        if (!is_bipartite) {
            out << "IMPOSSIBLE";
            return;
        }
        for (int i = 0; i < n; ++i) {
            if (color[i] == 0)
                out << 2 << " ";
            else
                out << 1 << " ";
        }
    }
};
 
int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    BuildingTeams solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
