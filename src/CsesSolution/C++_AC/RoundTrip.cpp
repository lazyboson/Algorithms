/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
 
#include <bits/stdc++.h>
 
using namespace std;
const int maxN = 1e5 + 1;
vector<int> adj[maxN];
int visited[maxN];
vector<int> parent;
 
class RoundTrip {
public:
    void dfs(int i, int p) {
        parent[i] = p;
        visited[i] = true;
        for (auto u: adj[i]) {
            if (u == p)
                continue;
            if (u != p && visited[u]) {
                //backtrack to print the result
                vector<int> path;
                int s = i;
                while (u != i) {
                    path.push_back(i);
                    i = parent[i];
                }
                path.push_back(u);
                path.push_back(s);
                cout << path.size() << "\n";
                for (auto c: path) {
                    cout << c << " ";
                }
                cout << "\n";
                exit(0);
            }
            dfs(u, i);
        }
    }
 
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        for (int i = 0; i < m; ++i) {
            int src, dest;
            in >> src >> dest;
            adj[src].push_back(dest);
            adj[dest].push_back(src);
        }
        parent.resize(n + 1, -1);
        for (int i = 1; i <= n; ++i) {
            if (parent[i] == -1) {
                dfs(i, -1);
            }
        }
        out << "IMPOSSIBLE\n";
 
    }
};
 
 
int main() {
    ios_base::sync_with_stdio(0);
    RoundTrip solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
