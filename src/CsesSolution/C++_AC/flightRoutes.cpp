/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
 
#include <bits/stdc++.h>
 
const int maxN = 2e5 + 4;
typedef long long ll;
 
using namespace std;
vector<pair<ll, ll>> routes[maxN];
 
class FlightRoutes {
public:
    void solve(std::istream &in, std::ostream &out) {
        ll n, m, k;
        in >> n >> m >> k;
        for (int i = 0; i < m; ++i) {
            ll src, dest, w;
            in >> src >> dest >> w;
            routes[src].push_back({dest, w});
        }
        vector<vector<ll>> dis(n + 1, vector<ll>(k, 1e18));
        priority_queue<pair<ll, ll>, vector<pair<ll, ll>>, greater<pair<ll, ll>>> pq;
        pq.push({0, 1});
        dis[1][0] = 0;
 
        while (!pq.empty()) {
            // node value
            ll u = pq.top().second;
 
            ll d = pq.top().first;
            pq.pop();
            if (dis[u][k - 1] < d) continue;
            auto v = routes[u];
            for (ll i = 0; i < (ll) v.size(); ++i) {
                auto dest = v[i].first;
                auto cost = v[i].second;
 
                if (d + cost < dis[dest][k - 1]) {
                    dis[dest][k - 1] = d + cost;
                    sort(dis[dest].begin(), dis[dest].end());
                    pq.push({d + cost, dest});
                }
            }
        }
        for (ll i = 0; i < k; ++i) {
            out << dis[n][i] << " ";
        }
    }
 
};
 
 
int main() {
    ios_base::sync_with_stdio(0);
    FlightRoutes solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}

