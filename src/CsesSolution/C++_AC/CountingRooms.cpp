/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author lazyboson
 */
 
#include <iostream>
#include <fstream>
 
#include <iostream>
 
const int maxN = 1e3 + 1;
std::string squares[maxN];
 
class CountingRooms {
public:
    bool comparator(int i, int j, int n, int m) {
        return i >= 0 && i < n && j >= 0 && j < m && squares[i][j] == '.';
    }
 
    void dfs(int i, int j, int n, int m) {
        squares[i][j] = '#';
        if (comparator(i - 1, j, n, m))
            dfs(i - 1, j, n, m);
        if (comparator(i + 1, j, n, m))
            dfs(i + 1, j, n, m);
        if (comparator(i, j - 1, n, m))
            dfs(i, j - 1, n, m);
        if (comparator(i, j + 1, n, m))
            dfs(i, j + 1, n, m);
    }
 
    void solve(std::istream &in, std::ostream &out) {
        int n, m;
        in >> n >> m;
        for (int i = 0; i < n; ++i) {
            in >> squares[i];
        }
 
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (comparator(i, j, n, m)) {
                    dfs(i, j, n, m), ++ans;
                }
            }
        }
        out << ans << "\n";
    }
};
 
int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);
    CountingRooms solver;
    std::istream &in(std::cin);
    std::ostream &out(std::cout);
    solver.solve(in, out);
    return 0;
}
